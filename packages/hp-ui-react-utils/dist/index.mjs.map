{"version":3,"sources":["../src/get-child-of-type.ts","../src/get-children-of-type.ts","../src/use-responsive-value.ts","../src/index.ts"],"names":["React"],"mappings":";AAAA,YAAY,WAAW;AAOhB,SAAS,eACd,UACA,MACA;AACA,SAAc,eAAS,QAAQ,QAAQ,EAA2B;AAAA,IAChE,CAAC,SAAS,KAAK,SAAS;AAAA,EAC1B;AACF;;;ACdA,YAAYA,YAAW;AAOhB,SAAS,kBACd,UACA,MACA;AACA,SAAc,gBAAS,QAAQ,QAAQ,EAA2B;AAAA,IAChE,CAAC,SACC,MAAM,QAAQ,IAAI,IACd,KAAK,KAAK,CAAC,cAAc,cAAc,KAAK,IAAI,IAChD,KAAK,SAAS;AAAA,EACtB;AACF;;;ACjBA;AAAA,EAGE;AAAA,EACA;AAAA,OACK;AAEP,IAAM,YAAY,CAAC,SAAc,YAAkC;AACjE,MAAI,MAAM,QAAQ,OAAO;AAAG,WAAO;AAAA,WAC1B,OAAO,YAAY;AAAU,WAAO,mCAAU;AACvD,MAAI,WAAW;AAAM,WAAO,CAAC,OAAO;AACpC,SAAO,CAAC;AACV;AAEO,IAAM,qBAAqB,CAChC,OACA,YACG;AAjBL;AAkBE,QAAM,QAAQ,SAAS;AACvB,QAAM,aAAa,UAAU,QAAO,WAAM,kBAAN,mBAAqB,YAAY;AACrE,SAAO,mBAAmB,YAAY,OAAO;AAC/C;;;ACjBA,cAAc","sourcesContent":["import * as React from 'react'\n\n/**\n * Get the first child of a specific type.\n * @param children The children\n * @param type The component type\n */\nexport function getChildOfType(\n  children: React.ReactNode,\n  type: React.JSXElementConstructor<any>\n) {\n  return (React.Children.toArray(children) as React.ReactElement[]).find(\n    (item) => item.type === type\n  )\n}\n","import * as React from 'react'\n\n/**\n * Get all children of a specific type.\n * @param children The children\n * @param type The component type\n */\nexport function getChildrenOfType(\n  children: React.ReactNode,\n  type: React.JSXElementConstructor<any> | React.JSXElementConstructor<any>[]\n) {\n  return (React.Children.toArray(children) as React.ReactElement[]).filter(\n    (item) =>\n      Array.isArray(type)\n        ? type.some((component) => component === item.type)\n        : item.type === type\n  )\n}\n","import {\n  ResponsiveValue,\n  UseBreakpointOptions,\n  useTheme,\n  useBreakpointValue,\n} from '@chakra-ui/react'\n\nconst normalize = (variant: any, toArray?: (value: any) => any) => {\n  if (Array.isArray(variant)) return variant\n  else if (typeof variant === 'object') return toArray?.(variant)\n  if (variant != null) return [variant]\n  return []\n}\n\nexport const useResponsiveValue = (\n  value: ResponsiveValue<any>,\n  options?: UseBreakpointOptions\n) => {\n  const theme = useTheme()\n  const normalized = normalize(value, theme.__breakpoints?.toArrayValue)\n  return useBreakpointValue(normalized, options)\n}\n","export * from './get-child-of-type'\nexport * from './get-children-of-type'\nexport * from './use-responsive-value'\n\nexport * from '@chakra-ui/utils'\n"]}