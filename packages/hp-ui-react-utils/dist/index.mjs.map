{"version":3,"sources":["../src/get-child-of-type.ts","../src/get-children-of-type.ts","../src/use-responsive-value.ts"],"names":["React2"],"mappings":";;;;;AAOO,SAAS,cAAA,CACd,UACA,IACA,EAAA;AACA,EAAc,OAAA,KAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAQ,CAA2B,CAAA,IAAA;AAAA,IAChE,CAAC,IAAS,KAAA,IAAA,CAAK,IAAS,KAAA,IAAA;AAAA,GAC1B,CAAA;AACF,CAAA;ACPO,SAAS,iBAAA,CACd,UACA,IACA,EAAA;AACA,EAAc,OAAAA,KAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,QAAQ,CAA2B,CAAA,MAAA;AAAA,IAChE,CAAC,IAAA,KACC,KAAM,CAAA,OAAA,CAAQ,IAAI,CACd,GAAA,IAAA,CAAK,IAAK,CAAA,CAAC,cAAc,SAAc,KAAA,IAAA,CAAK,IAAI,CAAA,GAChD,KAAK,IAAS,KAAA,IAAA;AAAA,GACtB,CAAA;AACF,CAAA;ACVA,IAAM,SAAA,GAAY,CAAC,OAAA,EAAc,OAAkC,KAAA;AACjE,EAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,OAAO,CAAA,EAAU,OAAA,OAAA,CAAA;AAAA,OAAA,IAC1B,OAAO,OAAA,KAAY,QAAU,EAAA,OAAO,OAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACvD,EAAA,IAAI,OAAW,IAAA,IAAA,EAAa,OAAA,CAAC,OAAO,CAAA,CAAA;AACpC,EAAA,OAAO,EAAC,CAAA;AACV,CAAA,CAAA;AAEa,IAAA,kBAAA,GAAqB,CAChC,KAAA,EACA,OACG,KAAA;AAjBL,EAAA,IAAA,EAAA,CAAA;AAkBE,EAAA,MAAM,QAAQ,QAAS,EAAA,CAAA;AACvB,EAAA,MAAM,aAAa,SAAU,CAAA,KAAA,EAAA,CAAO,EAAM,GAAA,KAAA,CAAA,aAAA,KAAN,mBAAqB,YAAY,CAAA,CAAA;AACrE,EAAO,OAAA,kBAAA,CAAmB,YAAY,OAAO,CAAA,CAAA;AAC/C","file":"index.mjs","sourcesContent":["import * as React from 'react'\n\n/**\n * Get the first child of a specific type.\n * @param children The children\n * @param type The component type\n */\nexport function getChildOfType(\n  children: React.ReactNode,\n  type: React.JSXElementConstructor<any>\n) {\n  return (React.Children.toArray(children) as React.ReactElement[]).find(\n    (item) => item.type === type\n  )\n}\n","import * as React from 'react'\n\n/**\n * Get all children of a specific type.\n * @param children The children\n * @param type The component type\n */\nexport function getChildrenOfType(\n  children: React.ReactNode,\n  type: React.JSXElementConstructor<any> | React.JSXElementConstructor<any>[]\n) {\n  return (React.Children.toArray(children) as React.ReactElement[]).filter(\n    (item) =>\n      Array.isArray(type)\n        ? type.some((component) => component === item.type)\n        : item.type === type\n  )\n}\n","import {\n  ResponsiveValue,\n  UseBreakpointOptions,\n  useTheme,\n  useBreakpointValue,\n} from '@chakra-ui/react'\n\nconst normalize = (variant: any, toArray?: (value: any) => any) => {\n  if (Array.isArray(variant)) return variant\n  else if (typeof variant === 'object') return toArray?.(variant)\n  if (variant != null) return [variant]\n  return []\n}\n\nexport const useResponsiveValue = (\n  value: ResponsiveValue<any>,\n  options?: UseBreakpointOptions\n) => {\n  const theme = useTheme()\n  const normalized = normalize(value, theme.__breakpoints?.toArrayValue)\n  return useBreakpointValue(normalized, options)\n}\n"]}